window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cfbd_json_py", "modulename": "cfbd_json_py", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.betting", "modulename": "cfbd_json_py.betting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.betting.get_cfbd_betting_lines", "modulename": "cfbd_json_py.betting", "qualname": "get_cfbd_betting_lines", "kind": "function", "doc": "<p>Retrives betting information from the CFBD API for a given season, \nor you could only get betting information for a single game.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    The season you want to retrive betting information from.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>game_id</code> (int, optional):\n    Optional argument. \n    If <code>game_id</code> is set to a game ID, <code>get_cfb_betting_lines()</code> will try to get \n    all betting informaiton for that game ID.</p>\n\n<p><code>week</code> (int, optional):\n    Optional argument.\n    If <code>week</code> is set to an integer, this function will attempt \n    to load betting data from games in that season, and that week.</p>\n\n<p><code>season_type</code> (str, semi-optional):\n    Semi-optional argument.\n    By defualt, this will be set to \"regular\", for the CFB regular season.\n    If you want postseason betting data, set <code>season_type</code> to \"postseason\".\n    If <code>season_type</code> is set to anything but \"regular\" or \"postseason\", \n    a <code>ValueError()</code> will be raised.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you only want betting information for a team, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want game-level betting data from.</p>\n\n<p><code>home_team</code> (str, optional):\n    Optional argument.\n    If you only want betting information for a team, \n    where that team was the home team in this season,\n    set <code>home_team</code> to the name of the team you want game-level betting data from.</p>\n\n<p><code>away_team</code> (str, optional):\n    Optional argument.\n    If you only want betting information for a team, \n    where that team was the away team in this season,\n    set <code>away_team</code> to the name of the team you want game-level betting data from.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want betting information from games \n    involving teams a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want betting informaiton from.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.betting import get_cfbd_betting_lines\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Gets all available betting info for the 2020 CFB season.\n    print(\"Gets all available betting info for the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Gets all available betting info for the 2020 CFB season, in week 2.\n    print(\"Gets all available betting info for the 2020 CFB season, in week 2.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        week=2\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for the 2020 CFB season, in the postseason (bowls, playoffs, etc.).\n    print(\"Gets all betting info for the 2020 CFB season, in the postseason (bowls, playoffs, etc.).\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        season_type=\"postseason\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Cincinnati Bearcats Football games the 2020 CFB season.\n    print(\"Gets all betting info for Cincinnati Bearcats Football games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Ohio Bobcats home games the 2020 CFB season.\n    print(\"Gets all betting info for Ohio Bobcats home games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        home_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Ohio State Buckeyes away games the 2020 CFB season.\n    print(\"Gets all betting info for Ohio State Buckeyes away games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        away_team=\"Ohio State\"\n    )\n\n    # Gets all betting info for Atlantic Coast Conference (ACC) games the 2020 CFB season.\n    print(\"Gets all betting info for Atlantic Coast Conference (ACC) games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        conference_abv=\"ACC\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_betting_lines(\n        api_key=cfbd_key,\n        season=2020,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Gets all available betting info for the 2020 CFB season.\n    print(\"Gets all available betting info for the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all available betting info for the 2020 CFB season, in week 2.\n    print(\"Gets all available betting info for the 2020 CFB season, in week 2.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        week=2\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for the 2020 CFB season, in the postseason (bowls, playoffs, etc.).\n    print(\"Gets all betting info for the 2020 CFB season, in the postseason (bowls, playoffs, etc.).\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        season_type=\"postseason\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Cincinnati Bearcats Football games the 2020 CFB season.\n    print(\"Gets all betting info for Cincinnati Bearcats Football games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Ohio Bobcats home games the 2020 CFB season.\n    print(\"Gets all betting info for Ohio Bobcats home games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        home_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # Gets all betting info for Ohio State Buckeyes away games the 2020 CFB season.\n    print(\"Gets all betting info for Ohio State Buckeyes away games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n\n        season=2020,\n        away_team=\"Ohio State\"\n    )\n\n    # Gets all betting info for Atlantic Coast Conference (ACC) games the 2020 CFB season.\n    print(\"Gets all betting info for Atlantic Coast Conference (ACC) games the 2020 CFB season.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        conference_abv=\"ACC\"\n    )\n    print(json_data)\n    time.sleep(5)\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_betting_lines(\n        season=2020,\n        return_as_dict=True\n    )\n    print(json_data)\n\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with college football betting data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with college football betting data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">home_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">away_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.coaches", "modulename": "cfbd_json_py.coaches", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.coaches.get_cfbd_coaches_info", "modulename": "cfbd_json_py.coaches", "qualname": "get_cfbd_coaches_info", "kind": "function", "doc": "<p>Retrives information from the CFBD API on CFB Head Coaches.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>first_name</code> (str, optional):\n    Optional argument.\n    If you want to only look up coaches with a specific first name, \n    set this variable to that specific first name, and this function \n    will attempt to look up coaches with that specific first name.</p>\n\n<p><code>last_name</code> (str, optional):\n    Optional argument.\n    If you want to only look up coaches with a specific last name, \n    set this variable to that specific first name, and this function \n    will attempt to look up coaches with that specific last name.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you want to filter and drill down to coaches who coached a specific\n    CFB team, set this </p>\n\n<p><code>season</code> (int, optional):\n    Optional argument.\n    If you only want coaches from a specific season, set this variable to that season.</p>\n\n<p><code>min_season</code> (int, optional):\n    Optional argument.\n    Similar to <code>year</code>, but used in tandem with <code>max_season</code> to get coaches who coached with in a range of seasons.</p>\n\n<p><code>max_season</code> (int, optional):\n    Optional argument.\n    Similar to <code>year</code>, but used in tandem with <code>min_season</code> to get coaches who coached with in a range of seasons.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.coaches import get_cfbd_coaches_info\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Getting all coaches in the 2020 CFB season\n    print(\"Getting every coach in the 2020 CFB season.\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n    # Getting all coaches in the 2020 CFB season, with a first name of \"Luke\"\n    print(\"Getting every coach in the 2020 CFB season, with a first name of \"Luke\".\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        season=2020,\n        first_name=\"Luke\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting all coaches in the 2020 CFB season, with a last name of \"Day\"\n    print(\"Getting all coaches in the 2020 CFB season, with a last name of \"Day\".\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        season=2020,\n        last_name=\"Day\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every head coach for the 2020 Southern Mississippi Golden Eagles\n    print(\"Getting every head coach for the 2020 Southern Mississippi Golden Eagles.\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        season=2020,\n        team=\"Southern Mississippi\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every head coach between the 2019 and 2022 CFB seasons\n    print(\"Getting every head coach between the 2019 and 2022 CFB seasons\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        min_season=2019,\n        max_season=2022\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_coaches_info(\n        api_key=cfbd_key,\n        season=2022,\n        team=\"Cincinnati\",\n        return_as_dict=True\n    )\n    print(f\"{json_data}\")\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Getting every coach in the 2020 CFB season.\n    print(\"Getting every coach in the 2020 CFB season.\")\n    json_data = get_cfbd_coaches_info(season=2020)\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every coach in the 2020 CFB season, with a first name of \"Luke\".\n    print(\"Getting every coach in the 2020 CFB season, with a first name of \"Luke\".\")\n    json_data = get_cfbd_coaches_info(\n        season=2020,\n        first_name=\"Luke\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every coach in the 2020 CFB season, with a last name of \"Day\".\n    print(\"Getting every coach in the 2020 CFB season, with a last name of \"Day\".\")\n    json_data = get_cfbd_coaches_info(\n        season=2020,\n        last_name=\"Day\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every head coach for the 2020 Southern Mississippi Golden Eagles.\n    print(\"Getting every head coach for the 2020 Southern Mississippi Golden Eagles.\")\n    json_data = get_cfbd_coaches_info(\n        season=2020,\n        team=\"Southern Mississippi\"\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # Getting every head coach between the 2019 and 2022 CFB seasons.\n    print(\"Getting every head coach between the 2019 and 2022 CFB seasons.\")\n    json_data = get_cfbd_coaches_info(\n        min_season=2019,\n        max_season=2022\n    )\n    print(f\"{json_data}\")\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_coaches_info(\n        season=2022,\n        team=\"Cincinnati\",\n        return_as_dict=True\n    )\n    print(f\"{json_data}\")\n\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with CFB head coach data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with CFB head coach data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.conferences", "modulename": "cfbd_json_py.conferences", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.conferences.get_cfbd_conference_info", "modulename": "cfbd_json_py.conferences", "qualname": "get_cfbd_conference_info", "kind": "function", "doc": "<p>Retrives a list of CFB conferences from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.conferences import get_cfbd_conference_info\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Gets CFB confrence info from the CFBD API.\n    print(\"Gets CFB confrence info from the CFBD API.\")\n    json_data = get_cfbd_conference_info(api_key=cfbd_key)\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_conference_info(\n        api_key=cfbd_key,\n        return_as_dict=True)\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Gets CFB confrence info from the CFBD API.\n    print(\"Gets CFB confrence info from the CFBD API.\")\n    json_data = get_cfbd_conference_info()\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_conference_info(return_as_dict=True)\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with CFB conference data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with CFB conference data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.draft", "modulename": "cfbd_json_py.draft", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.draft.get_cfbd_nfl_teams", "modulename": "cfbd_json_py.draft", "qualname": "get_cfbd_nfl_teams", "kind": "function", "doc": "<p>Retrives a list of NFL teams from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.draft import get_cfbd_nfl_teams\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Gets NFL team info from the CFBD API.\n    print(\"Gets NFL team info from the CFBD API.\")\n    json_data = get_cfbd_nfl_teams(api_key=cfbd_key)\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_teams(\n        api_key=cfbd_key,\n        return_as_dict=True)\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Gets NFL team info from the CFBD API.\n    print(\"Gets NFL team info from the CFBD API.\")\n    json_data = get_cfbd_nfl_teams()\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_teams(return_as_dict=True)\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with NFL team data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with NFL team data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.draft.get_cfbd_nfl_positions", "modulename": "cfbd_json_py.draft", "qualname": "get_cfbd_nfl_positions", "kind": "function", "doc": "<p>Retrives a list of player positions for the NFL Draft from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.draft import get_cfbd_nfl_positions\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Gets a list of player positions for the NFL Draft from the CFBD API.\n    print(\"Gets a list of player positions for the NFL Draft from the CFBD API.\")\n    json_data = get_cfbd_nfl_positions(api_key=cfbd_key)\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_positions(\n        api_key=cfbd_key,\n        return_as_dict=True)\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Gets a list of player positions for the NFL Draft from the CFBD API.\n    print(\"Gets a list of player positions for the NFL Draft from the CFBD API.\")\n    json_data = get_cfbd_nfl_positions()\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_positions(return_as_dict=True)\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with player position data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with player position data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.draft.get_cfbd_nfl_draft_info", "modulename": "cfbd_json_py.draft", "qualname": "get_cfbd_nfl_draft_info", "kind": "function", "doc": "<p>Retrives a list of actual NFL Draft selections from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p>The following paramaters are optional, but it is highly reccomended to not call this function\nwithiout settting one of these five optional paramaters to a non-null value.</p>\n\n<p><code>season</code> (int, semi-optional):\n    Semi-Optional argument. \n    This is the season you want NFL Draft information for. For example, if you only want \n    data for the 2020 NFL Draft, set <code>season</code> to <code>2020</code>.</p>\n\n<p><code>nfl_team</code> (str, optional):\n    Semi-Optional argument.\n    If you only want NFL Draft selections from a specific NFL team, set <code>nfl_team</code> to the \n    name of that team. For example, if you want to only get NFL Draft information for \n    draft picks made by the Cincinnati Bengals, set <code>nfl_team</code> to <code>Cincinnati</code>.</p>\n\n<p><code>college</code> (str, optional):\n    Semi-Optional argument.\n    If you only want NFL Draft selections from a specific CFB team, set <code>college</code> to the \n    name of that team. For example, if you want to only get NFL Draft information for \n    draft picks from the Clemson Tigers Football Program, set <code>college</code> to <code>Clemson</code>.</p>\n\n<p><code>conference</code> (str, optional):\n    Semi-Optional argument.\n    If you only want NFL Draft selections from a specific CFB confrence, set <code>conference</code> to the abbreviation of that confrence. \n    A list of CFBD API confrence abbreviations can be found in the <code>conference_abbreviation</code> column from \n    the pandas DataFrame that is returned by calling <code>cfbd_json_py.conferences.get_cfbd_conference_info()</code>.\n    For example, if you want to only get NFL Draft information for \n    draft picks that played in the Big 12, set <code>confrence</code> to <code>B12</code>.</p>\n\n<p><code>position</code> (str, optional):\n    Semi-Optional argument.\n    If you only want NFL Draft selections who played a specific position, \n    set <code>position</code> to that position's abbreviation. \n    A list of CFBD API positions can be found in the <code>position_abbreviation</code> column from \n    the pandas DataFrame that is returned by calling <code>cfbd_json_py.draft.get_cfbd_nfl_positions()</code>.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.draft import get_cfbd_nfl_draft_info\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get NFL Draft selections from the 2020 NFL Draft.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft.\")\n    json_data = get_cfbd_nfl_draft_info(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made by the\n    # 2020 Cincinnati Bengals.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made by the 2020 Cincinnati Bengals.\")\n    json_data = get_cfbd_nfl_draft_info(\n        api_key=cfbd_key,\n        season=2020,\n        nfl_team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made involving\n    # Clemson Tigers football players.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made involving Clemson Tigers football players.\")\n    json_data = get_cfbd_nfl_draft_info(\n        api_key=cfbd_key,\n        season=2020,\n        college=\"Clemson\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made involving\n    # players who played in the Southeastern Confrence (SEC).\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made involving players who played in the Southeastern Confrence (SEC).\")\n    json_data = get_cfbd_nfl_draft_info(\n        api_key=cfbd_key,\n        season=2020,\n        conference=\"SEC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made\n    # where the selected player was a QB in college.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made where the selected player was a QB in college.\")\n    json_data = get_cfbd_nfl_draft_info(\n        api_key=cfbd_key,\n        season=2020,\n        position=\"QB\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        position=\"QB\",\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get NFL Draft selections from the 2020 NFL Draft.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft.\")\n    json_data = get_cfbd_nfl_draft_info(season=2020)\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made by the\n    # 2020 Cincinnati Bengals.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made by the 2020 Cincinnati Bengals.\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        nfl_team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made involving\n    # Clemson Tigers football players.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made involving Clemson Tigers football players.\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        college=\"Clemson\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made involving\n    # players who played in the Southeastern Confrence (SEC).\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made involving players who played in the Southeastern Confrence (SEC).\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        conference=\"SEC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get NFL Draft selections from the 2020 NFL Draft made\n    # where the selected player was a QB in college.\n    print(\"Get NFL Draft selections from the 2020 NFL Draft made where the selected player was a QB in college.\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        position=\"QB\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_nfl_draft_info(\n        season=2020,\n        position=\"QB\",\n        return_as_dict=True\n    )\n    print(json_data)\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with NFL Draft selection data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with NFL Draft selection data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nfl_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">college</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.drives", "modulename": "cfbd_json_py.drives", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.drives.get_cfbd_drives_info", "modulename": "cfbd_json_py.drives", "qualname": "get_cfbd_drives_info", "kind": "function", "doc": "<p>Retrives a list of CFB drives from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    Required argument.\n    Specifies the season you want CFB drive information from.\n    This must be specified, otherwise this package, and by extension\n    the CFBD API, will not accept the request to get CFB drive information.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>season_type</code> (str, semi-optional):\n    Semi-optional argument.\n    By defualt, this will be set to \"regular\", for the CFB regular season.\n    If you want CFB drive data for non-regular season games, \n    set <code>season_type</code> to \"postseason\".\n    If <code>season_type</code> is set to anything but \"regular\" or \"postseason\", \n    a <code>ValueError()</code> will be raised.</p>\n\n<p><code>week</code> (int, optional):\n    Optional argument.\n    If <code>week</code> is set to an integer, this function will attempt \n    to load CFB drive data from games in that season, and that week.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data for a team, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB drive data from.</p>\n\n<p><code>offensive_team</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data from a team, while they are on offense, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB drive data from.</p>\n\n<p><code>defensive_team</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data from a team, while they are on defense,\n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB drive data from.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data from games \n    involving teams from a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want CFB drive data from.\n    For a list of confrences, \n    use the <code>cfbd_json_py.conferences.get_cfbd_conference_info()</code>\n    function.</p>\n\n<p><code>offensive_conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data from games \n    where the offensive team is from a specific confrenece,\n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want CFB drive data from.\n    For a list of confrences, \n    use the <code>cfbd_json_py.conferences.get_cfbd_conference_info()</code>\n    function.</p>\n\n<p><code>defensive_conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want CFB drive data from games \n    where the defensive team is from a specific confrenece,\n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want CFB drive data from.\n    For a list of confrences, \n    use the <code>cfbd_json_py.conferences.get_cfbd_conference_info()</code>\n    function.</p>\n\n<p><code>ncaa_division</code> (str, semi-optional):\n    Semi-optional argument.\n    By default, <code>ncaa_division</code> will be set to \"fbs\", \n    short for the Football Bowl Subdivision (FBS), \n    formerly known as D1-A (read as \"division one single A\"),\n    the highest level in the NCAA football pyramid,\n    where teams can scolarship up to 85 players \n    on their football team soley for athletic ability, \n    and often have the largest athletics budgets\n    within the NCAA.</p>\n\n<pre><code>Other valid inputs are:\n- \"fcs\": Football Championship Subdivision (FCS), \n    formerly known as D1-AA (read as \"division one double A\").\n    An FCS school is still in the 1st division of the NCAA,\n    making them elligable for the March Madness tournament,\n    but may not have the resources to compete at the FBS level\n    at this time. FCS schools are limited to 63 athletic scolarships\n    for football.\n- \"ii\": NCAA Division II. Schools in this and D3 are not\n    elligable for the March Madness tournament, \n    and are limited to 36 athletic scolarships for their football team.\n- \"iii\": NCAA Division III. The largest single division within the \n    NCAA football pyramid. \n    D3 schools have the distinction of being part of \n    the only NCAA division that cannot give out scolarships soley \n    for athletic ability.\n</code></pre>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.drives import get_cfbd_drives_info\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get CFB Drive data from the 2020 CFB season.\n    print(\"Get CFB Drive data from the 2020 CFB season.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from week 10 of the 2020 CFB season.\n    print(\"Get CFB Drive data from week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Cincinnati Bearcats\n    # Football Team.\n    print(\"Get CFB Drive data from games involving the 2020 Cincinnati Bearcats Football Team.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Ohio Bobcats\n    # Football Team, when Ohio was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio Bobcats Football Team, when Ohio was on offense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        offensive_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Ohio State Buckeyes\n    # Football Team, when Ohio was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        defensive_team=\"Ohio State\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Big 12 games in the 2020 CFB season.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        conference_abv=\"B12\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Big 10 (B1G) games in the 2020 CFB season,\n    # where the Big 10 team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        offensive_conference_abv=\"B1G\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from  Mid-American Conference (MAC) games\n    # in the 2020 CFB season, where the MAC team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        defensive_conference_abv=\"MAC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Football Championship Subdivision (FCS) games\n    # in week 3 ofthe 2020 CFB season,\n    # where the MAC team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        api_key=cfbd_key,\n        season=2020,\n        week=3,\n        ncaa_division=\"fcs\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        week=10,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get CFB Drive data from the 2020 CFB season.\n    print(\"Get CFB Drive data from the 2020 CFB season.\")\n    json_data = get_cfbd_drives_info(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from week 10 of the 2020 CFB season.\n    print(\"Get CFB Drive data from week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Cincinnati Bearcats\n    # Football Team.\n    print(\"Get CFB Drive data from games involving the 2020 Cincinnati Bearcats Football Team.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Ohio Bobcats\n    # Football Team, when Ohio was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio Bobcats Football Team, when Ohio was on offense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        offensive_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from games involving the 2020 Ohio State Buckeyes\n    # Football Team, when Ohio was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        defensive_team=\"Ohio State\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Big 12 games in the 2020 CFB season.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        conference_abv=\"B12\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Big 10 (B1G) games in the 2020 CFB season,\n    # where the Big 10 team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        offensive_conference_abv=\"B1G\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from  Mid-American Conference (MAC) games\n    # in the 2020 CFB season, where the MAC team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        defensive_conference_abv=\"MAC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB Drive data from Football Championship Subdivision (FCS) games\n    # in week 3 ofthe 2020 CFB season,\n    # where the MAC team was on offense.\n    print(\"Get CFB Drive data from games involving the 2020 Ohio State Buckeyes Football Team, when Ohio State was on defense.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        week=3,\n        ncaa_division=\"fcs\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_drives_info(\n        season=2020,\n        week=10,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with CFB drive data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with CFB drive data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offensive_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defensive_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offensive_conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defensive_conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games", "modulename": "cfbd_json_py.games", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.games.get_cfbd_games", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_games", "kind": "function", "doc": "<p>Retrives game schedule data from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    Required argument.\n    Specifies the season you want CFB game information from.\n    This must be specified, otherwise this package, and by extension\n    the CFBD API, will not accept the request to get CFB game information.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>season_type</code> (str, semi-optional):\n    Semi-optional argument.\n    By defualt, this will be set to \"regular\", for the CFB regular season.\n    If you want CFB game information for non-regular season games, \n    set <code>season_type</code> to \"postseason\".\n    If <code>season_type</code> is set to anything but \"regular\" or \"postseason\", \n    a <code>ValueError()</code> will be raised.</p>\n\n<p><code>week</code> (int, optional):\n    Optional argument.\n    If <code>week</code> is set to an integer, this function will attempt \n    to load CFB game data from games in that season, and in that week.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you only want CFB game information for a team, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB game information from.</p>\n\n<p><code>home_team</code> (str, optional):\n    Optional argument.\n    If you only want game information for a team, \n    where that team was the home team in this season,\n    set <code>home_team</code> to the name of the team you want game information for.</p>\n\n<p><code>away_team</code> (str, optional):\n    Optional argument.\n    If you only want game information for a team, \n    where that team was the away team in this season,\n    set <code>away_team</code> to the name of the team you want game information for.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want game information from games \n    involving teams a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want game information from.</p>\n\n<p><code>ncaa_division</code> (str, semi-optional):\n    Semi-optional argument.\n    By default, <code>ncaa_division</code> will be set to \"fbs\", \n    short for the Football Bowl Subdivision (FBS), \n    formerly known as D1-A (read as \"division one single A\"),\n    the highest level in the NCAA football pyramid,\n    where teams can scolarship up to 85 players \n    on their football team soley for athletic ability, \n    and often have the largest athletics budgets\n    within the NCAA.</p>\n\n<pre><code>Other valid inputs are:\n- \"fcs\": Football Championship Subdivision (FCS), \n    formerly known as D1-AA (read as \"division one double A\").\n    An FCS school is still in the 1st division of the NCAA,\n    making them elligable for the March Madness tournament,\n    but may not have the resources to compete at the FBS level\n    at this time. FCS schools are limited to 63 athletic scolarships\n    for football.\n- \"ii\": NCAA Division II. Schools in this and D3 are not\n    elligable for the March Madness tournament, \n    and are limited to 36 athletic scolarships for their football team.\n- \"iii\": NCAA Division III. The largest single division within the \n    NCAA football pyramid. \n    D3 schools have the distinction of being part of \n    the only NCAA division that cannot give out scolarships soley \n    for athletic ability.\n</code></pre>\n\n<p><code>game_id</code> (int, optional):\n    Optional argument. \n    If <code>game_id</code> is set to a game ID, <code>get_cfb_betting_lines()</code> will try to get \n    game information just for that game ID.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_games\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get CFB games from the 2020 CFB season.\n    print(\"Get CFB games from the 2020 CFB season.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB games from week 10 of the 2020 CFB season.\n    print(\"Get CFB games from week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB games from the 2019 CFB season that involved the 2019 LSU Tigers.\n    print(\"Get CFB games from the 2019 CFB season that involved the 2019 LSU Tigers.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2019,\n        team=\"LSU\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2021 Cincinnati Bearcats Football games where the Bearcats were the home team.\n    print(\"Get 2021 Cincinnati Bearcats Football games where the Bearcats were the home team.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2021,\n        home_team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\n    print(\"Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2019,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\n    print(\"Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2018,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2022 college football games where one or more teams competing\n    # was a Football Championship Subdivision team.\n    print(\"Get 2022 college football games where one or more teams competing was a Football Championship Subdivision team.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2018,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get game information for the\n    # 2021 American Athletic Confrence (AAC) Championship Game.\n    print(\"Get game information for the 2021 American Athletic Confrence (AAC) Championship Game.\")\n    json_data = get_cfbd_games(\n        api_key=cfbd_key,\n        season=2018,\n        game_id=401331162\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_games(\n        season=2020,\n        week=10,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get CFB games from the 2020 CFB season.\n    print(\"Get CFB games from the 2020 CFB season.\")\n    json_data = get_cfbd_games(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB games from week 10 of the 2020 CFB season.\n    print(\"Get CFB games from week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_games(\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get CFB games from the 2019 CFB season that involved the 2019 LSU Tigers.\n    print(\"Get CFB games from the 2019 CFB season that involved the 2019 LSU Tigers.\")\n    json_data = get_cfbd_games(\n        season=2019,\n        team=\"LSU\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2021 Cincinnati Bearcats Football games where the Bearcats were the home team.\n    print(\"Get 2021 Cincinnati Bearcats Football games where the Bearcats were the home team.\")\n    json_data = get_cfbd_games(\n        season=2021,\n        home_team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\n    print(\"Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\")\n    json_data = get_cfbd_games(\n        season=2019,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\n    print(\"Get 2018 Ohio Bobcats Football games where the Bobcats were the away team.\")\n    json_data = get_cfbd_games(\n        season=2018,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get 2022 college football games where one or more teams competing\n    # was a Football Championship Subdivision team.\n    print(\"Get 2022 college football games where one or more teams competing was a Football Championship Subdivision team.\")\n    json_data = get_cfbd_games(\n        season=2018,\n        away_team=\"Ohio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get game information for the\n    # 2021 American Athletic Confrence (AAC) Championship Game.\n    print(\"Get game information for the 2021 American Athletic Confrence (AAC) Championship Game.\")\n    json_data = get_cfbd_games(\n        season=2018,\n        game_id=401331162\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_games(\n        season=2020,\n        week=10,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with college football game information, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with college football game information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">home_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">away_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_team_records", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_team_records", "kind": "function", "doc": "<p>Get a team, or multiple team's record (wins, losses, ties) for home games, away games, \nconfrence games, and the team's record for that season.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>season</code> (int, optional):\n    Semi-optional argument. \n    Specifies the season you want CFB team records data from.\n    You MUST set <code>season</code> or <code>team</code> to a non-null value for \n    this function to work. If you don't, a <code>ValueError()</code> \n    will be raised.</p>\n\n<p><code>team</code> (str, optional):\n    Semi-ptional argument.\n    If you only want CFB team records data for a specific team,\n    set <code>team</code> to the name of the team you want CFB drive data from.\n    You MUST set <code>season</code> or <code>team</code> to a non-null value for \n    this function to work. If you don't, a <code>ValueError()</code> \n    will be raised.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want CFB team records data from games \n    involving teams from a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want CFB team records data from.\n    For a list of confrences, \n    use the <code>cfbd_json_py.conferences.get_cfbd_conference_info()</code>\n    function.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_team_records\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get CFB team records from the 2020 CFB season.\n    print(\"Get CFB team records from the 2020 CFB season.\")\n    json_data = get_cfbd_team_records(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get team records from football teams fielded by the University of Cincinnati.\n    print(\"Get team records from football teams fielded by the University of Cincinnati.\")\n    json_data = get_cfbd_team_records(\n        api_key=cfbd_key,\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get team records from football teams that played in the Big 10 (B1G) Confrence\n    # in the 2017 CFB season\n    print(\"Get team records from football teams that played in the Big 10 (B1G) Confrence in the 2017 CFB season\")\n    json_data = get_cfbd_team_records(\n        api_key=cfbd_key,\n        season=2017,\n        conference_abv=\"B1G\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_team_records(\n        season=2020,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get CFB team records from the 2020 CFB season.\n    print(\"Get CFB team records from the 2020 CFB season.\")\n    json_data = get_cfbd_team_records(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get team records from football teams fielded by the University of Cincinnati.\n    print(\"Get team records from football teams fielded by the University of Cincinnati.\")\n    json_data = get_cfbd_team_records(\n        team=\"Cincinnati\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get team records from football teams that played in the Big 10 (B1G) Confrence\n    # in the 2017 CFB season\n    print(\"Get team records from football teams that played in the Big 10 (B1G) Confrence in the 2017 CFB season\")\n    json_data = get_cfbd_team_records(\n        season=2017,\n        conference_abv=\"B1G\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_team_records(\n        season=2020,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with CFB team records data, \nor (if <code>return_as_dict</code> is set to <code>True</code>)\na dictionary object with CFB team records data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_season_weeks", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_season_weeks", "kind": "function", "doc": "<p>Retrives a list of weeks that occured in a given CFB season.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    Required argument.\n    Specifies the season you want a list of weeks that occured in a given CFB season information from.\n    This must be specified, otherwise this package, and by extension\n    the CFBD API, will not accept the request to get a list of weeks that occured in a given CFB season information.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_season_weeks\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get a list of weeks in the 2020 CFB season.\n    print(\"Get a list of weeks in the 2020 CFB season.\")\n    json_data = get_cfbd_season_weeks(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_season_weeks(\n        season=2020,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get a list of weeks in the 2020 CFB season.\n    print(\"Get a list of weeks in the 2020 CFB season.\")\n    json_data = get_cfbd_season_weeks(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_season_weeks(\n        season=2020,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with a list of valid weeks in a given CFB season, \nor (if <code>return_as_dict</code> is set to <code>True</code>)\na dictionary object with a list of valid weeks in a given CFB season.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_game_media_info", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_game_media_info", "kind": "function", "doc": "<p>Gets known media information for CFB games in a given CFB season.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    Required argument.\n    Specifies the season you want CFB media information from.\n    This must be specified, otherwise this package, and by extension\n    the CFBD API, will not accept the request to get CFB media information.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>season_type</code> (str, semi-optional):\n    Semi-optional argument.\n    By defualt, this will be set to \"regular\", for the CFB regular season.\n    If you want CFB media information for non-regular season games, \n    set <code>season_type</code> to \"postseason\".\n    If you want both \"regular\" and \"postseason\" games retunred, \n    set <code>season_type</code> to \"both\"\n    If <code>season_type</code> is set to anything but \"regular\" or \"postseason\", \n    a <code>ValueError()</code> will be raised.</p>\n\n<p><code>week</code> (int, optional):\n    Optional argument.\n    If <code>week</code> is set to an integer, this function will attempt \n    to load CFB media information from games in that season, and in that week.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you only want CFB media information for a team, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB media information from.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want media information from games \n    involving teams a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want game information from.</p>\n\n<p><code>media_type</code> (str, semi-optional):\n    Semi-optional argument.\n    If you only want game broadcast information for a specific type of broadcast,\n    set this to the type of broadcast.</p>\n\n<pre><code>Valid inputs are: \n- `all` (default): Returns all games, and all known broadcasters for those games.\n- `tv`: Returns all known TV broadcasters for CFB games in the requested timeframe.\n- `radio`: Returns all known radio broadcasters \n    for CFB games in the requested timeframe.\n- `web`: Returns all known web broadcasts (like ESPN+) \n    for CFB games in the requested timeframe.\n- `ppv`: Returns all known Pay Per View (PPV) broadcasts \n    for CFB games in the requested timeframe.\n- `mobile`: Returns all known broadcasters that only broadcasted \n    games on mobile devices (?)\n</code></pre>\n\n<p><code>ncaa_division</code> (str, semi-optional):\n    Semi-optional argument.\n    By default, <code>ncaa_division</code> will be set to \"fbs\", \n    short for the Football Bowl Subdivision (FBS), \n    formerly known as D1-A (read as \"division one single A\"),\n    the highest level in the NCAA football pyramid,\n    where teams can scolarship up to 85 players \n    on their football team soley for athletic ability, \n    and often have the largest athletics budgets\n    within the NCAA.</p>\n\n<pre><code>Other valid inputs are:\n- \"fcs\": Football Championship Subdivision (FCS), \n    formerly known as D1-AA (read as \"division one double A\").\n    An FCS school is still in the 1st division of the NCAA,\n    making them elligable for the March Madness tournament,\n    but may not have the resources to compete at the FBS level\n    at this time. FCS schools are limited to 63 athletic scolarships\n    for football.\n- \"ii\": NCAA Division II. Schools in this and D3 are not\n    elligable for the March Madness tournament, \n    and are limited to 36 athletic scolarships for their football team.\n- \"iii\": NCAA Division III. The largest single division within the \n    NCAA football pyramid. \n    D3 schools have the distinction of being part of \n    the only NCAA division that cannot give out scolarships soley \n    for athletic ability.\n</code></pre>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_game_media_info\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get a media information for the 2020 CFB season.\n    print(\"Get a media information for the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get a media information for postseason games in the 2020 CFB season.\n    print(\"Get a media information for the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        season_type=\"postseason\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get a media information for week 10 games in the 2020 CFB season.\n    print(\"Get a media information for week 10 games in the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known broadcasters for games played by the Ohio State Football Program in the the 2019 CFB season.\n    print(\"Get all known broadcasters for games played by the Ohio State Football Program in the the 2019 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        team=\"Ohio State\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known radio broadcasters for games played by teams within the American Athletic Confrence (AAC) in the the 2021 CFB season.\n    print(\"Get all known radio broadcasters for games played by teams within the American Athletic Confrence (AAC) in the the 2021 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        conference_abv=\"AAC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known radio broadcasters for games in the the 2020 CFB season.\n    print(\"Get all known radio broadcasters for games in the the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        media_type=\"radio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known broadcasters for Football Championship Subdivision (FCS) games in the 2020 CFB season.\n    print(\"Get all known broadcasters for Football Championship Subdivision (FCS) games in the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        api_key=cfbd_key,\n        season=2020,\n        ncaa_division=\"fcs\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get a media information for the 2020 CFB season.\n    print(\"Get a media information for the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get a media information for postseason games in the 2020 CFB season.\n    print(\"Get a media information for the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        season_type=\"postseason\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get a media information for week 10 games in the 2020 CFB season.\n    print(\"Get a media information for week 10 games in the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known broadcasters for games played by the Ohio State Football Program in the the 2019 CFB season.\n    print(\"Get all known broadcasters for games played by the Ohio State Football Program in the the 2019 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        team=\"Ohio State\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known radio broadcasters for games played by teams within the American Athletic Confrence (AAC) in the the 2021 CFB season.\n    print(\"Get all known radio broadcasters for games played by teams within the American Athletic Confrence (AAC) in the the 2021 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        conference_abv=\"AAC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known radio broadcasters for games in the the 2020 CFB season.\n    print(\"Get all known radio broadcasters for games in the the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        media_type=\"radio\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get all known broadcasters for Football Championship Subdivision (FCS) games in the 2020 CFB season.\n    print(\"Get all known broadcasters for Football Championship Subdivision (FCS) games in the 2020 CFB season.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        ncaa_division=\"fcs\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_game_media_info(\n        season=2020,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with college football media information, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with college football media information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">media_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_player_game_stats", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_player_game_stats", "kind": "function", "doc": "<p>Retrives player game stats for a given time frame.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>season</code> (int, mandatory):\n    Required argument.\n    Specifies the season you want CFB media information from.\n    This must be specified, otherwise this package, and by extension\n    the CFBD API, will not accept the request to get CFB media information.</p>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>season_type</code> (str, semi-optional):\n    Semi-optional argument.\n    By defualt, this will be set to \"regular\", for the CFB regular season.\n    If you want CFB media information for non-regular season games, \n    set <code>season_type</code> to \"postseason\".\n    If <code>season_type</code> is set to anything but \"regular\" or \"postseason\", \n    a <code>ValueError()</code> will be raised.</p>\n\n<p><strong>For the following three variables, \nat least one must be set to a non-null variable when calling this function.</strong></p>\n\n<p><code>week</code> (int, optional):\n    Optional argument.\n    If <code>week</code> is set to an integer, this function will attempt \n    to load CFB media information from games in that season, and in that week.</p>\n\n<p><code>team</code> (str, optional):\n    Optional argument.\n    If you only want CFB media information for a team, \n    regardless if they are the home/away team,\n    set <code>team</code> to the name of the team you want CFB media information from.</p>\n\n<p><code>conference_abv</code> (str, optional):\n    Optional argument.\n    If you only want media information from games \n    involving teams a specific confrence, \n    set <code>conference_abv</code> to the abbreviation \n    of the conference you want game information from.</p>\n\n<p><code>stat_category</code> (str, optional):\n    Optional argument.\n    If only want stats for a specific stat category, \n    set this variable to that category.</p>\n\n<pre><code>Valid inputs are:\n- `passing`\n- `rushing`\n- `receiving`\n- `fumbles`\n- `defensive`\n- `interceptions`\n- `punting`\n- `kicking`\n- `kickReturns`\n- `puntReturns`\n</code></pre>\n\n<p><code>game_id</code> (int, optional):\n    Optional argument. \n    If <code>game_id</code> is set to a game ID, <code>get_cfbd_player_game_stats()</code> will try to get \n    player game stats just for that game ID.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_player_game_stats\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get player game stats for week 10 of the 2020 CFB season.\n    print(\"Get player game stats for week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get postseason player game stats for the 2020 CFB season.\n    print(\"Get postseason player game stats for the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2020,\n        season_type=\"postseason\",\n        week=1\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats for the Alabma Crimson Tide Football Team for the 2018 CFB season.\n    print(\"Get player game stats for the Alabma Crimson Tide Football Team for the 2018 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2018,\n        team=\"Alabama\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats for players of teams in the Atlantic Coast Conference (ACC) in the 2020 CFB season.\n    print(\"Get player game stats for players of teams in the Atlantic Coast Conference (ACC) in the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2020,\n        conference_abv=\"ACC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get get passing stats from players who played in week 7 of the 2017 CFB season.\n    print(\"Get get passing stats from players who played in week 7 of the 2017 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2017,\n        week=7,\n        stat_category=\"pasing\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats from the 2021 Virbo Citrus Bowl, \n    # a bowl game that happened in the 2020 CFB season.\n    print(\"Get player game stats from the 2021 Virbo Citrus Bowl, a bowl game that happened in the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        api_key=cfbd_key,\n        season=2020,\n        game_id=401256199\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        week=10,\n        api_key=cfbd_key,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get player game stats for week 10 of the 2020 CFB season.\n    print(\"Get player game stats for week 10 of the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        week=10\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get postseason player game stats for the 2020 CFB season.\n    print(\"Get postseason player game stats for the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        season_type=\"postseason\",\n        week=1\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats for the Alabma Crimson Tide Football Team for the 2018 CFB season.\n    print(\"Get player game stats for the Alabma Crimson Tide Football Team for the 2018 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2018,\n        team=\"Alabama\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats for players of teams in the Atlantic Coast Conference (ACC) in the 2020 CFB season.\n    print(\"Get player game stats for players of teams in the Atlantic Coast Conference (ACC) in the 2020 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        conference_abv=\"ACC\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get get passing stats from players who played in week 7 of the 2017 CFB season.\n    print(\"Get get passing stats from players who played in week 7 of the 2017 CFB season.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2017,\n        week=7,\n        stat_category=\"passing\"\n    )\n    print(json_data)\n    time.sleep(5)\n\n    # Get player game stats from the 2021 Virbo Citrus Bowl, \n    # a bowl game that happened in the 2020 CFB season,\n    # between the Aubrun Tigers, and the Northwestern Wildcats.\n    print(\"Get player game stats from the 2021 Virbo Citrus Bowl, \"+\n        \"a bowl game that happened in the 2020 CFB season between the Aubrun Tigers, and the Northwestern Wildcats.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        game_id=401256199\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_player_game_stats(\n        season=2020,\n        week=10,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with player game stats data, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with player game stats data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stat_category</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_player_advanced_game_stats", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_player_advanced_game_stats", "kind": "function", "doc": "<p>Retrives advanced game stats from the CFBD API.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, optional):\n    Semi-optional argument. \n    If <code>api_key</code> is null, this function will attempt to load a CFBD API key\n    from the python environment, or from a file on this computer.\n    If <code>api_key</code> is not null, this function will automatically assume that the\n    inputted <code>api_key</code> is a valid CFBD API key.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument.\n    If <code>api_key</code> is set to a string non-empty string, this variable is ignored.\n    If <code>api_key_dir</code> is null, and <code>api_key</code> is null, \n    this function will try to find a CFBD API key file in this user's home directory.\n    If <code>api_key_dir</code> is set to a string, and <code>api_key</code> is null,\n    this function will assume that <code>api_key_dir</code> is a directory, \n    and will try to find a CFBD API key file in that directory.</p>\n\n<p><code>return_as_dict</code> (bool, semi-optional):\n    Semi-optional argument.\n    If you want this function to return the data as a dictionary (read: JSON object), \n    instead of a pandas <code>DataFrame</code> object,\n    set <code>return_as_dict</code> to <code>True</code>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<pre><code>import time\n\nfrom cfbd_json_py.games import get_cfbd_player_advanced_game_stats\n\n\ncfbd_key = \"tigersAreAwsome\"  # placeholder for your CFBD API Key.\n\nif cfbd_key != \"tigersAreAwsome\":\n    print(\"Using the user's API key declared in this script for this example.\")\n\n    # Get advanced player stats for a 2019 CFB game between the LSU Tigers Football Program, \n    # and the Oklahoma Sooners Football Program.\n    print(\"Get advanced player stats for a 2019 CFB game between the LSU Tigers Football Program, and the Oklahoma Sooners Football Program.\")\n    json_data = get_cfbd_player_advanced_game_stats(\n        api_key=cfbd_key,\n        game_id=401135278\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_player_advanced_game_stats(\n        api_key=cfbd_key,\n        game_id=401135278,\n        return_as_dict=True\n    )\n    print(json_data)\n\nelse:\n    # Alternatively, if the CFBD API key exists in this python environment,\n    # or it's been set by cfbd_json_py.utls.set_cfbd_api_token(),\n    # you could just call these functions directly, without setting the API key\n    # in the script.\n    print(\"Using the user's API key suposedly loaded into this python environment for this example.\")\n\n    # Get advanced player stats for a 2019 CFB game between the LSU Tigers Football Program, \n    # and the Oklahoma Sooners Football Program.\n    print(\"Get advanced player stats for a 2019 CFB game between the LSU Tigers Football Program, and the Oklahoma Sooners Football Program.\")\n    json_data = get_cfbd_player_advanced_game_stats(\n        game_id=401135278\n    )\n    print(json_data)\n    time.sleep(5)\n\n\n    # You can also tell this function to just return the API call as\n    # a Dictionary (read: JSON) object.\n    print(\"You can also tell this function to just return the API call as a Dictionary (read: JSON) object.\")\n    json_data = get_cfbd_player_advanced_game_stats(\n        game_id=401135278,\n        return_as_dict=True\n    )\n    print(json_data)\n\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A pandas <code>DataFrame</code> object with college football game information, \nor (if <code>return_as_dict</code> is set to <code>True</code>) \na dictionary object with college football game information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_live_scoreboard", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_live_scoreboard", "kind": "function", "doc": "<p>YOU MUST BE SUBSCRIBED TO THE CFBD PATREON FOR THIS FUNCTION TO WORK!\nTo view the CFBD Patreon, visit <a href=\"https://www.patreon.com/collegefootballdata\">https://www.patreon.com/collegefootballdata</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">conference</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.games.get_cfbd_weather_info", "modulename": "cfbd_json_py.games", "qualname": "get_cfbd_weather_info", "kind": "function", "doc": "<p>YOU MUST BE SUBSCRIBED TO THE CFBD PATREON FOR THIS FUNCTION TO WORK!\nTo view the CFBD Patreon, visit <a href=\"https://www.patreon.com/collegefootballdata\">https://www.patreon.com/collegefootballdata</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">conference</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics", "modulename": "cfbd_json_py.metrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_predicted_ppa_from_down_distance", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_predicted_ppa_from_down_distance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">down</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_team_ppa_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_team_ppa_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_game_ppa_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_game_ppa_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_game_player_ppa_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_game_player_ppa_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">player_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">play_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_season_player_ppa_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_season_player_ppa_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">player_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">play_threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_game_win_probability_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_game_win_probability_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.metrics.get_cfbd_pregame_win_probability_data", "modulename": "cfbd_json_py.metrics", "qualname": "get_cfbd_pregame_win_probability_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.players", "modulename": "cfbd_json_py.players", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.players.cfbd_player_search", "modulename": "cfbd_json_py.players", "qualname": "cfbd_player_search", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">search_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.players.get_cfbd_player_usage", "modulename": "cfbd_json_py.players", "qualname": "get_cfbd_player_usage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">player_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.players.get_cfbd_returning_production", "modulename": "cfbd_json_py.players", "qualname": "get_cfbd_returning_production", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.players.get_cfbd_player_season_stats", "modulename": "cfbd_json_py.players", "qualname": "get_cfbd_player_season_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stat_category</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.players.get_cfbd_transfer_portal_data", "modulename": "cfbd_json_py.players", "qualname": "get_cfbd_transfer_portal_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.plays", "modulename": "cfbd_json_py.plays", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.plays.get_cfbd_pbp_data", "modulename": "cfbd_json_py.plays", "qualname": "get_cfbd_pbp_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offensive_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defensive_team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offensive_conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">defensive_conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">play_type</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ncaa_division</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fbs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.plays.get_cfbd_pbp_play_types", "modulename": "cfbd_json_py.plays", "qualname": "get_cfbd_pbp_play_types", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.plays.get_cfbd_pbp_stats", "modulename": "cfbd_json_py.plays", "qualname": "get_cfbd_pbp_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">athlete_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stat_type_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.plays.get_cfbd_pbp_stat_types", "modulename": "cfbd_json_py.plays", "qualname": "get_cfbd_pbp_stat_types", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.plays.get_cfbd_live_pbp_data", "modulename": "cfbd_json_py.plays", "qualname": "get_cfbd_live_pbp_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">game_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.rankings", "modulename": "cfbd_json_py.rankings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.rankings.get_cfbd_poll_rankings", "modulename": "cfbd_json_py.rankings", "qualname": "get_cfbd_poll_rankings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.ratings", "modulename": "cfbd_json_py.ratings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.ratings.get_cfbd_sp_plus_ratings", "modulename": "cfbd_json_py.ratings", "qualname": "get_cfbd_sp_plus_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.ratings.get_cfbd_srs_ratings", "modulename": "cfbd_json_py.ratings", "qualname": "get_cfbd_srs_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conferenece</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.ratings.get_cfbd_sp_plus_conference_ratings", "modulename": "cfbd_json_py.ratings", "qualname": "get_cfbd_sp_plus_conference_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.ratings.get_cfbd_elo_ratings", "modulename": "cfbd_json_py.ratings", "qualname": "get_cfbd_elo_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.recruiting", "modulename": "cfbd_json_py.recruiting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.recruiting.get_cfbd_player_recruit_ratings", "modulename": "cfbd_json_py.recruiting", "qualname": "get_cfbd_player_recruit_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recruit_classification</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;HighSchool&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.recruiting.get_cfbd_team_recruiting_ratings", "modulename": "cfbd_json_py.recruiting", "qualname": "get_cfbd_team_recruiting_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.recruiting.get_cfbd_team_recruiting_group_ratings", "modulename": "cfbd_json_py.recruiting", "qualname": "get_cfbd_team_recruiting_group_ratings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.stats", "modulename": "cfbd_json_py.stats", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.stats.get_cfbd_team_season_stats", "modulename": "cfbd_json_py.stats", "qualname": "get_cfbd_team_season_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.stats.get_cfbd_advanced_team_season_stats", "modulename": "cfbd_json_py.stats", "qualname": "get_cfbd_advanced_team_season_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">start_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.stats.get_cfbd_advanced_team_game_stats", "modulename": "cfbd_json_py.stats", "qualname": "get_cfbd_advanced_team_game_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">week</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">opponent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_garbage_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">season_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;regular&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.stats.get_cfbd_team_stat_categories", "modulename": "cfbd_json_py.stats", "qualname": "get_cfbd_team_stat_categories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.teams", "modulename": "cfbd_json_py.teams", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.teams.get_cfbd_team_information", "modulename": "cfbd_json_py.teams", "qualname": "get_cfbd_team_information", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conference_abv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.teams.get_cfbd_fbs_team_list", "modulename": "cfbd_json_py.teams", "qualname": "get_cfbd_fbs_team_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.teams.get_cfbd_team_rosters", "modulename": "cfbd_json_py.teams", "qualname": "get_cfbd_team_rosters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">team</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.teams.get_cfbd_team_talent_rankings", "modulename": "cfbd_json_py.teams", "qualname": "get_cfbd_team_talent_rankings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.teams.get_cfbd_team_matchup_history", "modulename": "cfbd_json_py.teams", "qualname": "get_cfbd_team_matchup_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">team_1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">team_2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_season</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.utls", "modulename": "cfbd_json_py.utls", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.utls.reverse_cipher_encrypt", "modulename": "cfbd_json_py.utls", "qualname": "reverse_cipher_encrypt", "kind": "function", "doc": "<p>Implements a reverse cipher encription to a plain text string.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>plain_text_str</code> (mandatory, str):\n    The string you want to encrypt through reverse cipher encryption.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A string encrypted through reverse cipher encryption.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plain_text_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.utls.reverse_cipher_decrypt", "modulename": "cfbd_json_py.utls", "qualname": "reverse_cipher_decrypt", "kind": "function", "doc": "<p>Decrypts a string that was presumed to be encrypted by a reverse cipher encryption.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>encrypted_text_str</code> (mandatory, str):\n    The string you presume that is encrypted through reverse cipher encryption, \n    that you want decrypted.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A decrypted string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encrypted_text_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.utls.get_cfbd_api_token", "modulename": "cfbd_json_py.utls", "qualname": "get_cfbd_api_token", "kind": "function", "doc": "<p>If the CFBD API key exists in the environment, \nor is in a file, this function retrives the CFBD API key, \nand returns it as a string.</p>\n\n<p>If this package is being used in a GitHub Actions action,\nset the key in the environment by \ncreating a repository secret nammed <code>CFBD_API_KEY</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument. If <code>api_key_dir</code> is set to a non-null string, \n    <code>set_cfbd_api_token()</code> will attempt to save the key file in that directory,\n    instead of this user's home directory.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A CFBD API key that exists within this python environment,\nor within this computer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.utls.set_cfbd_api_token", "modulename": "cfbd_json_py.utls", "qualname": "set_cfbd_api_token", "kind": "function", "doc": "<p>Sets the CFBD API key into a file that exists \neither in <code>{home_dir}/.cfbd/cfbd_key.json</code>, or in a custom directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>api_key</code> (str, mandatory):\n    The CFBD API key you have. \n    DO NOT input <code>Bearer {your CFBD API key}</code>,\n    this package will take care of that for you.</p>\n\n<p><code>api_key_dir</code> (str, optional):\n    Optional argument. If <code>api_key_dir</code> is set to a non-null string, \n    <code>set_cfbd_api_token()</code> will attempt to save the key file in that directory,\n    instead of this user's home directory.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Nothing. \nThis function only sets up the API key file that this package can reference later.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cfbd_json_py.venues", "modulename": "cfbd_json_py.venues", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cfbd_json_py.venues.get_cfbd_venues", "modulename": "cfbd_json_py.venues", "qualname": "get_cfbd_venues", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">api_key_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_as_dict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();